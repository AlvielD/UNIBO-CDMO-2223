I am going to sum up all of our modellings on a text file so we have everything on the same place:

Modelling 1: Item-oriented

Description:
This model was (more or less) suggested by chatGPT, we adapted it a bit from a piece of text generated by the AI itself.
The problem of this model might be that it is not that intuitive and we do not know how to specify when the courier must
go back to the origin point.

Variables:
	Array ita[j] = i
	Item assignments: Item j is assigned to courier i

	Array its[j] = t
	Item sequence: Item j is delivered in the delivering step t

Domains:
	ita in 1..m (m = number of couriers)
	its in 1..n (n = number of items = number of distr. points)

Constraints:
- Each item must be assigned to only one courier (Forced by the model)
- ?

------------------------------------------------------------------
Modelling 2: Courier-oriented

Description:
This modelling might be probably the most natural to come up to your mind when defining the problem, since you have a variable for each courier an item.
There are some problems with this modelling, namely the lacking of ordering in the delivery of the packages

Variables:
	x_i_j --> Deliver step in which item j is delivered by courier i.
	Basically we will have a matrix of n*m (n columns, m rows)

Domains:
	x_i_j in 1..n 
	(Because the maximum possible number of steps we can have is n if one courier deliver all of the objects)

Constraints:
- Each item must be assigned to only one courier (Check there is only one non-zero value per column)
- Do not overpass load size (Sum sizes of all items in a row whose value is non-zero and compare it to l_j)
- ?

-----------------------------------------------------------
Modelling 3: Step-oriented(?)

Description:
This model is really similar to the previous one, what makes it intuitive, and more important, easy to compute the objective function:
dist = SUM_{i=1}^{m}(SUM_{j=1}^{n}(D[j][j+1])) --> Remember to add the distance from origin to the first point at the begining (I haven't thought about how to do it yet)

Variables:
	x_i_t --> Item delivered by courier i at deliver step t.
	Matrix of n*m (n columns, m rows). Each row is a vector of deliver steps, when the courier is finished the rest of the values of the vector are equal to 0 or -1
	Another implementation could be using array of arrays (number of variables decided dynamically :-/)

Domains:
	x_i_t in 1..n --> Number of items basically

Constraints:
- Each item must be assigned to only one courier.
	Controll each value to be different only if is different than 0 (all_different_except_0.mzn)
- Do not overpass load size
	for each deliver step of a courier, sum the size of the items he is delivering and restrict it to be <= l[i] where i is the id of the courier
- Couriers must start and end in the origin point